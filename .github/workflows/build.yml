name: Test build

on:
  push:
    branches: [main, unstable, feature/debian-package]
  pull_request:
  schedule:
    - cron: '39 13 * * *' # run daily 

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-22.04, macos-latest, rpi3b, macos-11, macos-12, ubuntu-latest, ubuntu-20.04 ]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 35 # runtime across all OSs, runs can get queued and mac runs take 15-20 min
    steps:
    - name: Checkout repository
      uses: actions/checkout@main

    - name: Install packaged dependencies
      run: script/install_dependencies.sh

    - name: Configure
      run: |
        cmake -B ${{github.workspace}}/build_Debug -DCMAKE_BUILD_TYPE=Debug -DBUILD_UNITTESTS=TRUE
        cmake -B ${{github.workspace}}/build_Debug_NFM -DCMAKE_BUILD_TYPE=Debug -DNFM=TRUE -DBUILD_UNITTESTS=TRUE
        cmake -B ${{github.workspace}}/build_Release -DCMAKE_BUILD_TYPE=Release -DBUILD_UNITTESTS=TRUE
        cmake -B ${{github.workspace}}/build_Release_NFM -DCMAKE_BUILD_TYPE=Release -DNFM=TRUE -DBUILD_UNITTESTS=TRUE

    - name: Build
      run: |
        VERBOSE=1 cmake --build ${{github.workspace}}/build_Debug -j4
        VERBOSE=1 cmake --build ${{github.workspace}}/build_Debug_NFM -j4
        VERBOSE=1 cmake --build ${{github.workspace}}/build_Release -j4
        VERBOSE=1 cmake --build ${{github.workspace}}/build_Release_NFM -j4

    - name: Unit Tests
      run: |
        ${{github.workspace}}/build_Debug/src/unittests
        ${{github.workspace}}/build_Debug_NFM/src/unittests
        ${{github.workspace}}/build_Release/src/unittests
        ${{github.workspace}}/build_Release_NFM/src/unittests

    - name: Install
      run: sudo cmake --install ${{github.workspace}}/build_Release_NFM

    - name: Test run
      run: /usr/local/bin/rtl_airband -v
    
    - name: Set snapshot version
      id: sha
      run: echo "snapshot_version=$(script/snapshot_version.sh)" >> $GITHUB_OUTPUT
    
    - name: Create debian package
      if: runner.os == 'Linux'
      run: |
        pkg_dir="$(mktemp --directory)"
        export PACKAGE="rtl-airband"
        export VERSION="${{ steps.sha.outputs.snapshot_version }}"
        export ARCH="$(dpkg --print-architecture)"
        export MAINTAINER="charlie-foxtrot"
        export DEPENDS="libc6 (>= 2.34), libconfig++9v5 (>= 1.5-0.4), libmp3lame0 (>= 3.100), libshout3 (>= 2.4.5), librtlsdr0 (>= 0.6.0), libsoapysdr0.8 (>= 0.8.1), libfftw3-single3 (>= 3.3.8), libpulse0 (>= 14.2)"
        export DESCRIPTION="RTLSDR Airband - A multiband decoder for AM and NFM signals"
        script/package.sh "${pkg_dir}"
    
    # TODO use brew for macOS? https://brew.sh/
    - name: Create macOS package
      if: runner.os == 'macOS'
      run: |
        tar -zcvf rtl-airband_${{ steps.sha.outputs.snapshot_version }}_${{ matrix.os }}.tgz build_Release_NFM/src/rtl_airband
    
    - name: "Upload package as artifact"
      uses: actions/upload-artifact@v3
      with:
        name: "rtl-airband_${{ steps.sha.outputs.snapshot_version }}_${{ matrix.os }}"
        path: |
          *.deb
          *.tgz
        retention-days: 7

  build-foreign-arch:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@main
      
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Available build platforms
        run: echo ${{ steps.buildx.outputs.platforms }}

      - name: Login to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta_worker
        uses: docker/metadata-action@v4
        with:
          # ghcr.io/charlie-foxtrot/rtl-airband
          images: |
            ghcr.io/svavassori/rtl-airband
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
    
      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          cache-to: type=local,dest=/tmp/buildx-cache
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6
          outputs: type=image
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta_worker.outputs.tags }}
          labels: ${{ steps.meta_worker.outputs.labels }}
    
      - name: "Extract debian packages from docker cache"
        run: |
          mkdir packages
          find /tmp/buildx-cache/ -type f -size +50k -a -size -512k | xargs -I {} tar -xvf {} --strip-components=1 --directory=packages/
    
      - name: Set snapshot version
        id: sha
        run: echo "snapshot_version=$(script/snapshot_version.sh)" >> $GITHUB_OUTPUT
    
      - name: "Upload packages as artifacts"
        uses: actions/upload-artifact@v3
        with:
          name: "rtl-airband_${{ steps.sha.outputs.snapshot_version }}_multiarch-deb"
          path: "packages/*.deb"
          retention-days: 7
    
      - name: Release packages
        uses: softprops/action-gh-release@v1
        with:
          files: packages/*.deb
          prerelease: ${{ github.ref_type != 'tag' }}
          name: ${{ github.ref_name }}-${{ steps.sha.outputs.snapshot_version }}
          tag_name: ${{ github.ref_name }}-${{ steps.sha.outputs.snapshot_version }}
          fail_on_unmatched_files: true
